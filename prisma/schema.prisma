generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_ACCELERATE_URL")
}

// =============================================================================
// USER AUTHENTICATION & AUTHORIZATION
// =============================================================================

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELED
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)

  // Subscription fields
  subscriptionId     String?              // Stripe subscription ID
  stripeCustomerId   String?   @unique   // Stripe customer ID
  plan               SubscriptionPlan     @default(FREE)
  status             SubscriptionStatus   @default(TRIAL)
  trialEndsAt        DateTime?            // Fine trial (14 giorni default)
  currentPeriodStart DateTime?            // Inizio periodo corrente
  currentPeriodEnd   DateTime?            // Fine periodo (rinnovo)
  cancelAtPeriodEnd  Boolean   @default(false) // Cancellato ma attivo fino a fine periodo

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  preferences      UserPreferences?
  subscription     Subscription?
  tradingAccounts  TradingAccount[]

  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =============================================================================
// TRADING ACCOUNTS & DATA
// =============================================================================

enum AccountType {
  DEMO
  LIVE
  CHALLENGE
  FUNDED
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  PASSED
  FAILED
  WITHDRAWN
}

enum LockMode {
  SOFT      // Warning only, allow modifications
  MEDIUM    // EA auto-restores modifications
  HARD      // EA closes account if disabled
}

enum AutomationMode {
  MANUAL    // All trades require manual click
  PARTIAL   // Setup configured, execution manual
  FULL      // Setup + automatic execution at price
}

enum TradeOrderStatus {
  PENDING   // Waiting for EA to execute
  APPROVED  // Approved, ready for execution
  ACTIVE    // Order executed and position open
  EXECUTED  // Successfully executed on MT5 (legacy)
  CLOSED    // Position closed
  FAILED    // Execution failed
  CANCELED  // Manually canceled before execution
}

enum PropFirmProvider {
  FTMO
  MYFXFUNDS
  FIVEPERCENTERS
  FUNDEDNEXT
  THEFUNDEDTRADER
  OTHER
}

model TradingAccount {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  login           String        @unique
  broker          String
  server          String?
  accountType     AccountType   @default(DEMO)
  status          AccountStatus @default(ACTIVE)
  propFirm        String?
  phase           String?
  startBalance    Float
  currentBalance  Float
  equity          Float?
  margin          Float?
  freeMargin      Float?
  marginLevel     Float?
  profit          Float         @default(0)
  drawdown        Float         @default(0)
  maxDrawdown     Float?
  dailyDrawdown   Float?
  maxDailyLoss    Float?
  profitTarget    Float?
  currency        String        @default("USD")
  leverage        Int?
  lastSyncAt      DateTime?

  // MT5 Sync Strategy v2 Fields
  lastSyncedTicket String?       // Last ticket synced (for incremental checks)
  lastFullSyncAt   DateTime?     // When full history sync completed

  // Execution Layer Fields
  lockMode        LockMode      @default(MEDIUM)
  automationMode  AutomationMode @default(MANUAL)
  mt5ApiKey       String?       // API key for MT5 EA authentication

  // Guardian Settings
  maxRiskPercent       Float    @default(2.0)    // Max risk per trade (%)
  maxDailyLossPercent  Float    @default(3.0)    // Max daily loss (%)
  maxCurrencyExposure  Float    @default(2.0)    // Max exposure per currency (%)

  // Cooldown System
  lastTradeClosedAt    DateTime?                 // Last trade close time
  cooldownUntil        DateTime?                 // Cooldown expiry time
  cooldownReason       String?                   // Why cooldown was triggered

  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  trades              Trade[]
  metrics             AccountMetrics[]
  tradeOrders         TradeOrder[]
  propFirmChallenge   PropFirmChallenge?
  challengeSetup      ChallengeSetup?
  yamlAnalyses        YAMLAnalysis[]
  drawdownSnapshots   DrawdownSnapshot[]
  violationLogs       ViolationLog[]
  disciplineReports   DisciplineReport[]
  pnlSnapshots        PnLSnapshot[]
  alerts              Alert[]
  brokerSymbolSpecs   BrokerSymbolSpec[]
  symbolMappings      SymbolMapping[]

  @@index([userId])
  @@index([login])
  @@index([deletedAt])
  @@map("trading_accounts")
}

model Trade {
  id              String         @id @default(cuid())
  accountId       String
  ticket          String
  symbol          String
  type            String
  volume          Float
  openPrice       Float
  closePrice      Float?
  openTime        DateTime
  closeTime       DateTime?
  profit          Float?
  commission      Float?
  swap            Float?
  comment         String?
  magicNumber     Int?
  stopLoss        Float?
  takeProfit      Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  account         TradingAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, ticket])
  @@index([accountId])
  @@index([symbol])
  @@index([openTime])
  @@map("trades")
}

model AccountMetrics {
  id                  String         @id @default(cuid())
  accountId           String
  balance             Float
  equity              Float
  margin              Float?
  freeMargin          Float?
  marginLevel         Float?
  profit              Float
  drawdown            Float
  dailyProfit         Float?
  dailyDrawdown       Float?
  weeklyProfit        Float?
  monthlyProfit       Float?
  totalTrades         Int            @default(0)
  winningTrades       Int            @default(0)
  losingTrades        Int            @default(0)
  winRate             Float?
  profitFactor        Float?
  averageWin          Float?
  averageLoss         Float?
  largestWin          Float?
  largestLoss         Float?
  consecutiveWins     Int            @default(0)
  consecutiveLosses   Int            @default(0)
  recordedAt          DateTime       @default(now())

  account             TradingAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([recordedAt])
  @@map("account_metrics")
}

// =============================================================================
// ADDITIONAL MODELS (for future features)
// =============================================================================

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  mood        String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@map("journal_entries")
}

// =============================================================================
// TRADING ROOM - Premium Feature
// =============================================================================

enum AssetCategory {
  FOREX
  INDICES
  COMMODITIES
  METALS
  CRYPTO
  BITCOIN
}

enum SetupDirection {
  BUY
  SELL
  NEUTRAL
}

model TradingSetup {
  id              String            @id @default(cuid())

  // Categorizzazione
  category        AssetCategory
  symbol          String            // "EURUSD", "US30", "XAUUSD", "BTCUSD"

  // Setup Info
  direction       SetupDirection
  timeframe       String            // "4h", "1D", "3D", "8h"

  // Elliott Wave Analysis
  wavePattern     String?           // "Wave 3 Impulse", "ABC Correction"
  waveCount       String?           // "1-2-3-4-5", "A-B-C"

  // Price Levels
  entryPrice      Float?            // Optional for analysis-only setups
  stopLoss        Float?            // Optional for analysis-only setups
  takeProfit1     Float?
  takeProfit2     Float?
  takeProfit3     Float?
  invalidation    Float?            // Prezzo invalidazione setup
  targetArea      Float?            // Target generico (usato in waiting_list)

  // Analysis Details (new fields for waiting_list format)
  confidence      Int?              // Confidence level 0-100
  analysis        String?           @db.Text  // Detailed Elliott Wave analysis

  // Metadata
  analysisDate    DateTime          // Data dell'analisi Elliott
  publishedAt     DateTime          @default(now())
  expiresAt       DateTime?         // Setup scade dopo X giorni (opzionale)
  notes           String?           @db.Text  // Short note
  pdfUrl          String?           // Link al PDF originale (opzionale)

  // Premium Feature Control
  isPremium       Boolean           @default(true)
  requiredPlan    SubscriptionPlan  @default(PRO)

  // Stato
  isActive        Boolean           @default(true)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([category])
  @@index([isActive])
  @@index([publishedAt])
  @@index([analysisDate])
  @@map("trading_setups")
}

// =============================================================================
// API KEYS (for MT5 EA authentication)
// =============================================================================

model ApiKey {
  id          String    @id @default(cuid())
  key         String    @unique // Hashed API key
  userId      String
  name        String    // Descriptive name (e.g., "MT5 Account 123456")
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime? // Optional expiration
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([key])
  @@index([userId])
  @@map("api_keys")
}

// =============================================================================
// USER PREFERENCES (for settings page)
// =============================================================================

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  dailyReport           Boolean  @default(false)
  drawdownAlert         Boolean  @default(true)
  theme                 String   @default("system") // light/dark/system
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// =============================================================================
// SUBSCRIPTION SYSTEM (Multi-tenant SaaS)
// =============================================================================

model Subscription {
  id                     String              @id @default(cuid())
  userId                 String              @unique
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId   String?             @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  plan                   SubscriptionPlan
  status                 SubscriptionStatus  @default(TRIAL)

  canceledAt             DateTime?
  cancelAtPeriodEnd      Boolean             @default(false)

  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  invoices               Invoice[]

  @@map("subscriptions")
}

model PlanLimits {
  plan                  SubscriptionPlan @id
  maxTradingAccounts    Int              // FREE: 1, STARTER: 1, PRO: 5, ENTERPRISE: 999
  maxApiKeys            Int              // FREE: 1, STARTER: 2, PRO: 5, ENTERPRISE: 999
  maxDataRetentionDays  Int              // FREE: 7, STARTER: 30, PRO: 90, ENTERPRISE: 365
  advancedAnalytics     Boolean          // Solo PRO+
  customBranding        Boolean          // Solo ENTERPRISE
  prioritySupport       Boolean          // PRO+

  @@map("plan_limits")
}

model Invoice {
  id                 String         @id @default(cuid())
  subscriptionId     String
  subscription       Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  stripeInvoiceId    String         @unique
  amount             Float          // In centesimi (es. 2900 = $29.00)
  currency           String         @default("USD")
  status             String         // paid, open, void, uncollectible

  paidAt             DateTime?
  dueDate            DateTime?

  createdAt          DateTime       @default(now())

  @@index([subscriptionId])
  @@map("invoices")
}

// =============================================================================
// EXECUTION LAYER - Trade Management
// =============================================================================

model TradeOrder {
  id                String            @id @default(cuid())
  accountId         String
  account           TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Order Details
  symbol            String
  direction         String            // BUY or SELL
  orderType         String            // BUY_LIMIT, SELL_LIMIT, BUY_STOP, SELL_STOP, MARKET
  type              String            // BUY, SELL (legacy, keep for compatibility)
  lotSize           Float
  entryPrice        Float?            // null for market orders
  stopLoss          Float
  takeProfit1       Float?
  takeProfit2       Float?
  takeProfit3       Float?

  // Risk Management
  riskPercent       Float             // e.g., 1.0 for 1%
  riskAmount        Float             // Calculated risk in account currency

  // YAML Integration (NEW)
  yamlAnalysisId    String?
  yamlAnalysis      YAMLAnalysis?     @relation(fields: [yamlAnalysisId], references: [id])
  yamlAssetId       String?           // Reference to asset in YAML

  // Invalidation Tracking (NEW)
  invalidationPrice Float?            // Price that invalidates Elliott pattern
  invalidationRule  String?           // Description of invalidation rule

  // Lock Mechanism (NEW)
  isLocked          Boolean           @default(true)  // Cannot modify after placement
  lockReason        String?           @default("IMMUTABLE_AFTER_PLACEMENT")

  // Execution Status
  status            TradeOrderStatus  @default(PENDING)
  mt5Ticket         String?           // MT5 ticket number after execution
  mt5Status         String?           // MT5 status (PENDING, FILLED, REJECTED, etc.)
  mt5LastSync       DateTime?         // Last sync with MT5
  executedAt        DateTime?
  executionPrice    Float?            // Actual fill price from MT5
  executionTime     DateTime?         // Exact execution timestamp from MT5
  failureReason     String?

  // Close Tracking (NEW)
  closedAt          DateTime?
  closeReason       String?           // TP_HIT, SL_HIT, INVALIDATION, MANUAL, LIMIT_BREACH
  closePrice        Float?
  finalPnL          Float?

  // Metadata
  comment           String?
  magicNumber       Int?              @default(999001) // Special magic for AEGIS trades

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([accountId])
  @@index([status])
  @@index([yamlAnalysisId])
  @@index([createdAt])
  @@map("trade_orders")
}

model PropFirmChallenge {
  id                    String            @id @default(cuid())
  accountId             String            @unique
  account               TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Provider & Phase
  provider              PropFirmProvider
  phase                 String            // "Phase 1", "Phase 2", "Funded"

  // Rules
  maxDailyLossPercent   Float             // e.g., 5.0 for 5%
  maxTotalLossPercent   Float             // e.g., 10.0 for 10%
  profitTargetPercent   Float             // e.g., 10.0 for 10%
  minTradingDays        Int?              // Required trading days
  maxLotSize            Float?            // Max lot per trade
  maxOpenTrades         Int?              // Max concurrent trades

  // Tracking
  currentDailyLoss      Float             @default(0)
  currentTotalDrawdown  Float             @default(0)
  currentProfit         Float             @default(0)
  tradingDaysCompleted  Int               @default(0)

  // Correlation Limits
  maxCurrencyExposure   Float             @default(2.0) // Max % exposure per currency

  // Status
  isActive              Boolean           @default(true)
  passedAt              DateTime?
  failedAt              DateTime?
  failureReason         String?

  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt

  @@index([accountId])
  @@index([provider])
  @@map("prop_firm_challenges")
}

model CurrencyExposure {
  id                String            @id @default(cuid())
  accountId         String
  currency          String            // USD, EUR, GBP, JPY, etc.

  // Exposure Calculation
  longExposure      Float             @default(0) // % long exposure
  shortExposure     Float             @default(0) // % short exposure
  netExposure       Float             @default(0) // Net exposure

  // Related Positions
  openPositions     Int               @default(0)
  totalRisk         Float             @default(0) // Combined risk %

  calculatedAt      DateTime          @default(now())

  @@unique([accountId, currency])
  @@index([accountId])
  @@map("currency_exposures")
}

// =============================================================================
// EXECUTION LAYER - CHALLENGE SETUP (IMMUTABLE CONFIG)
// =============================================================================

model ChallengeSetup {
  id                String            @id @default(cuid())
  accountId         String            @unique
  account           TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Challenge Rules (READ-ONLY from provider)
  challengeProvider String            // FTMO, FundedNext, ThinCap, MyFundedFX, Custom
  challengePhase    String            // Phase1, Phase2, Funded
  overRollMaxPercent Float            // e.g., 5.0 for 5%
  dailyMaxPercent   Float             // e.g., 2.5 for 2.5%

  // User-Configured Settings (SET ONCE, IMMUTABLE after activation)
  userRiskPerTradePercent  Float      // e.g., 2.0 for 2%
  userRiskPerAssetPercent  Float      // e.g., 2.0 for 2%
  maxOrdersPerAsset        Int        // e.g., 3
  minTimeBetweenOrdersSec  Int        // e.g., 0 (no cooldown)

  // Calculated Derived Values (auto-computed)
  accountSize              Float      // e.g., 100000
  dailyBudgetDollars       Float      // e.g., 2500 (2.5% of 100k)
  overRollBudgetDollars    Float      // e.g., 5000 (5% of 100k)
  maxTradeRiskDollars      Float      // e.g., 2000 (2% of 100k)
  maxAssetAllocationDollars Float     // e.g., 2000 (2% of 100k)

  // UI/Discipline Settings
  pnlHideMode              Boolean    @default(true)  // Hide real-time P&L
  pnlRefreshRateHours      Int        @default(4)     // Update every 4 hours
  orderLockEnabled         Boolean    @default(true)  // Lock orders after placement
  autoCloseInvalidation    Boolean    @default(true)  // Auto-close on pattern break

  // Status
  setupCompletedAt         DateTime?                  // When wizard completed
  status                   String     @default("PENDING") // PENDING, ACTIVE, ENDED
  isLocked                 Boolean    @default(false)     // Cannot modify after activation

  createdAt                DateTime   @default(now())
  updatedAt                DateTime   @updatedAt

  @@index([accountId])
  @@map("challenge_setups")
}

// =============================================================================
// EXECUTION LAYER - YAML ANALYSIS (UPLOAD DIRETTO)
// =============================================================================

model YAMLAnalysis {
  id                String            @id @default(cuid())
  accountId         String
  account           TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // File Info
  fileName          String
  uploadedAt        DateTime          @default(now())

  // YAML Content (raw text)
  rawYAML           String            @db.Text
  parsedData        Json              // Parsed YAML as JSON
  extractedAssets   Json              // Array of trading setups

  // Validation
  validationStatus  String            @default("PENDING") // PENDING, VALID, INVALID
  validationErrors  Json?             // Array of validation errors

  // User Review
  reviewedBy        String?           // User ID who reviewed
  reviewedAt        DateTime?
  reviewNotes       String?           @db.Text

  // Generated Orders
  generatedOrders   TradeOrder[]

  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([accountId])
  @@index([validationStatus])
  @@index([uploadedAt])
  @@map("yaml_analyses")
}

// =============================================================================
// EXECUTION LAYER - DRAWDOWN SNAPSHOTS (REAL-TIME TRACKING)
// =============================================================================

model DrawdownSnapshot {
  id                    String            @id @default(cuid())
  accountId             String
  account               TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Drawdown Tracking
  dailyDrawdownTotal    Float             // Daily DD in dollars
  overRollDrawdownTotal Float             // Over-roll DD in dollars
  closedPnL             Float             // Realized P&L
  floatingPnL           Float             // Unrealized P&L

  // Timestamp
  timestamp             DateTime          @default(now())

  @@index([accountId, timestamp])
  @@map("drawdown_snapshots")
}

// =============================================================================
// EXECUTION LAYER - VIOLATIONS LOG (FOMO TRACKING)
// =============================================================================

model ViolationLog {
  id                String            @id @default(cuid())
  accountId         String
  account           TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Violation Details
  violationType     String            // FOMO_ATTEMPT, ORDER_MOD_ATTEMPT, LIMIT_BREACH, etc.
  description       String            @db.Text
  actionTaken       String            // BLOCKED, WARNED, LOGGED
  severity          String            // INFO, WARNING, CRITICAL
  metadata          Json?             // Additional context data

  // Timestamp
  timestamp         DateTime          @default(now())

  @@index([accountId, timestamp])
  @@index([violationType])
  @@map("violation_logs")
}

// =============================================================================
// EXECUTION LAYER - DISCIPLINE REPORTS (END-OF-DAY SCORECARD)
// =============================================================================

model DisciplineReport {
  id                 String            @id @default(cuid())
  accountId          String
  account            TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Report Date
  reportDate         DateTime

  // Discipline Score (0-100)
  disciplineScore    Int

  // Trading Stats
  totalTrades        Int
  winningTrades      Int
  losingTrades       Int

  // P&L
  netPnL             Float
  dailyDrawdown      Float
  overRollDrawdown   Float

  // Full Report Data (JSON)
  reportData         Json              // Complete report structure

  createdAt          DateTime          @default(now())

  @@unique([accountId, reportDate])
  @@index([accountId])
  @@index([reportDate])
  @@map("discipline_reports")
}

// =============================================================================
// UI/UX FEATURES - P&L SNAPSHOTS & ALERTS
// =============================================================================

model PnLSnapshot {
  id                String            @id @default(cuid())
  accountId         String
  account           TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Snapshot Time
  snapshotTime      DateTime          @default(now())

  // P&L Data
  balance           Float
  equity            Float
  profit            Float
  drawdown          Float
  dailyPnL          Float

  // Metadata
  isManualReveal    Boolean           @default(false)  // User clicked "Reveal P&L"

  @@index([accountId, snapshotTime])
  @@map("pnl_snapshots")
}

model Alert {
  id                String            @id @default(cuid())
  accountId         String
  account           TradingAccount    @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Alert Details
  type              String            // TRADE_EXECUTED, INVALIDATION, LIMIT_WARNING, etc
  severity          String            // INFO, WARNING, CRITICAL
  title             String
  message           String            @db.Text
  metadata          Json?             // Additional context

  // Status
  isRead            Boolean           @default(false)
  isDismissed       Boolean           @default(false)

  // Timestamps
  createdAt         DateTime          @default(now())
  readAt            DateTime?
  dismissedAt       DateTime?

  @@index([accountId, createdAt])
  @@index([isRead])
  @@map("alerts")
}

// ============================================================================
// BROKER SYMBOL SPECIFICATIONS
// ============================================================================

model BrokerSymbolSpec {
  id              String         @id @default(cuid())
  accountId       String
  account         TradingAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Symbol Identity
  symbol          String         // Broker-specific symbol name (e.g., "XTIUSD", "EURUSDm")
  description     String?        // Human-readable description (e.g., "Crude Oil")

  // Price Specifications
  digits          Int            // Decimal places for price (e.g., 2 for oil, 5 for EURUSD)
  point           Float          // Minimum price movement (e.g., 0.01 for oil)
  tickSize        Float?         // Tick size if different from point
  tickValue       Float?         // Value of one tick

  // Contract Specifications
  contractSize    Float          // Contract size (e.g., 1000 for oil, 100000 for forex)

  // Lot Size Constraints
  minLot          Float          // Minimum lot size (e.g., 0.01)
  maxLot          Float          // Maximum lot size (e.g., 100.0)
  lotStep         Float          // Lot size step (e.g., 0.01)

  // Trading Constraints
  stopLevel       Int            // Minimum stop level in points (e.g., 50)
  freezeLevel     Int            // Freeze level in points
  tradeMode       String         // FULL, CLOSE_ONLY, DISABLED

  // Market Information
  spread          Int?           // Current spread in points
  spreadFloat     Float?         // Floating spread if applicable

  // Margin & Leverage
  leverage        Int?           // Leverage for this symbol
  marginInitial   Float?         // Initial margin requirement
  marginMaintenance Float?       // Maintenance margin requirement
  marginRequired  Float?         // Margin required for 1 lot

  // Symbol Category
  category        String?        // FOREX, INDICES, COMMODITIES, CRYPTO, etc.

  // Sync Information
  lastUpdated     DateTime       @default(now())
  createdAt       DateTime       @default(now())

  @@unique([accountId, symbol])
  @@index([accountId])
  @@index([symbol])
  @@map("broker_symbol_specs")
}

model SymbolMapping {
  id              String         @id @default(cuid())
  accountId       String
  account         TradingAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  // Mapping
  standardSymbol  String         // Standard symbol name (e.g., "GOLD", "WTI", "EURUSD")
  brokerSymbol    String         // Broker-specific symbol (e.g., "XAUUSD", "XTIUSD", "EURUSDm")

  // Metadata
  category        String?        // FOREX, INDICES, COMMODITIES, CRYPTO
  confidence      Float          @default(1.0) // 1.0 = manual, 0.5-0.99 = auto-detected
  source          String         @default("manual") // manual, auto, seed

  // Tracking
  createdBy       String?        // User ID who created the mapping
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@unique([standardSymbol, accountId])
  @@index([accountId])
  @@index([standardSymbol])
  @@index([brokerSymbol])
  @@map("symbol_mappings")
}
