generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_ACCELERATE_URL")
}

// =============================================================================
// USER AUTHENTICATION & AUTHORIZATION
// =============================================================================

enum UserRole {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  STARTER
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  TRIAL
  PAST_DUE
  CANCELED
  EXPIRED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          UserRole  @default(USER)

  // Subscription fields
  subscriptionId     String?              // Stripe subscription ID
  stripeCustomerId   String?   @unique   // Stripe customer ID
  plan               SubscriptionPlan     @default(FREE)
  status             SubscriptionStatus   @default(TRIAL)
  trialEndsAt        DateTime?            // Fine trial (14 giorni default)
  currentPeriodStart DateTime?            // Inizio periodo corrente
  currentPeriodEnd   DateTime?            // Fine periodo (rinnovo)
  cancelAtPeriodEnd  Boolean   @default(false) // Cancellato ma attivo fino a fine periodo

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  preferences      UserPreferences?
  subscription     Subscription?
  tradingAccounts  TradingAccount[]

  @@map("users")
}

// NextAuth Account model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// =============================================================================
// TRADING ACCOUNTS & DATA
// =============================================================================

enum AccountType {
  DEMO
  LIVE
  CHALLENGE
  FUNDED
}

enum AccountStatus {
  ACTIVE
  INACTIVE
  PASSED
  FAILED
  WITHDRAWN
}

model TradingAccount {
  id              String        @id @default(cuid())
  userId          String
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  login           String        @unique
  broker          String
  server          String?
  accountType     AccountType   @default(DEMO)
  status          AccountStatus @default(ACTIVE)
  propFirm        String?
  phase           String?
  startBalance    Float
  currentBalance  Float
  equity          Float?
  margin          Float?
  freeMargin      Float?
  marginLevel     Float?
  profit          Float         @default(0)
  drawdown        Float         @default(0)
  maxDrawdown     Float?
  dailyDrawdown   Float?
  maxDailyLoss    Float?
  profitTarget    Float?
  currency        String        @default("USD")
  leverage        Int?
  lastSyncAt      DateTime?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deletedAt       DateTime?

  trades          Trade[]
  metrics         AccountMetrics[]

  @@index([userId])
  @@index([login])
  @@index([deletedAt])
  @@map("trading_accounts")
}

model Trade {
  id              String         @id @default(cuid())
  accountId       String
  ticket          String
  symbol          String
  type            String
  volume          Float
  openPrice       Float
  closePrice      Float?
  openTime        DateTime
  closeTime       DateTime?
  profit          Float?
  commission      Float?
  swap            Float?
  comment         String?
  magicNumber     Int?
  stopLoss        Float?
  takeProfit      Float?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  account         TradingAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, ticket])
  @@index([accountId])
  @@index([symbol])
  @@index([openTime])
  @@map("trades")
}

model AccountMetrics {
  id                  String         @id @default(cuid())
  accountId           String
  balance             Float
  equity              Float
  margin              Float?
  freeMargin          Float?
  marginLevel         Float?
  profit              Float
  drawdown            Float
  dailyProfit         Float?
  dailyDrawdown       Float?
  weeklyProfit        Float?
  monthlyProfit       Float?
  totalTrades         Int            @default(0)
  winningTrades       Int            @default(0)
  losingTrades        Int            @default(0)
  winRate             Float?
  profitFactor        Float?
  averageWin          Float?
  averageLoss         Float?
  largestWin          Float?
  largestLoss         Float?
  consecutiveWins     Int            @default(0)
  consecutiveLosses   Int            @default(0)
  recordedAt          DateTime       @default(now())

  account             TradingAccount @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@index([accountId])
  @@index([recordedAt])
  @@map("account_metrics")
}

// =============================================================================
// ADDITIONAL MODELS (for future features)
// =============================================================================

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  title       String
  content     String   @db.Text
  mood        String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([createdAt])
  @@map("journal_entries")
}

// =============================================================================
// API KEYS (for MT5 EA authentication)
// =============================================================================

model ApiKey {
  id          String    @id @default(cuid())
  key         String    @unique // Hashed API key
  userId      String
  name        String    // Descriptive name (e.g., "MT5 Account 123456")
  isActive    Boolean   @default(true)
  lastUsedAt  DateTime?
  expiresAt   DateTime? // Optional expiration
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([key])
  @@index([userId])
  @@map("api_keys")
}

// =============================================================================
// USER PREFERENCES (for settings page)
// =============================================================================

model UserPreferences {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  dailyReport           Boolean  @default(false)
  drawdownAlert         Boolean  @default(true)
  theme                 String   @default("system") // light/dark/system
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

// =============================================================================
// SUBSCRIPTION SYSTEM (Multi-tenant SaaS)
// =============================================================================

model Subscription {
  id                     String              @id @default(cuid())
  userId                 String              @unique
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeSubscriptionId   String?             @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?

  plan                   SubscriptionPlan
  status                 SubscriptionStatus  @default(TRIAL)

  canceledAt             DateTime?
  cancelAtPeriodEnd      Boolean             @default(false)

  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt

  invoices               Invoice[]

  @@map("subscriptions")
}

model PlanLimits {
  plan                  SubscriptionPlan @id
  maxTradingAccounts    Int              // FREE: 1, STARTER: 1, PRO: 5, ENTERPRISE: 999
  maxApiKeys            Int              // FREE: 1, STARTER: 2, PRO: 5, ENTERPRISE: 999
  maxDataRetentionDays  Int              // FREE: 7, STARTER: 30, PRO: 90, ENTERPRISE: 365
  advancedAnalytics     Boolean          // Solo PRO+
  customBranding        Boolean          // Solo ENTERPRISE
  prioritySupport       Boolean          // PRO+

  @@map("plan_limits")
}

model Invoice {
  id                 String         @id @default(cuid())
  subscriptionId     String
  subscription       Subscription   @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  stripeInvoiceId    String         @unique
  amount             Float          // In centesimi (es. 2900 = $29.00)
  currency           String         @default("USD")
  status             String         // paid, open, void, uncollectible

  paidAt             DateTime?
  dueDate            DateTime?

  createdAt          DateTime       @default(now())

  @@index([subscriptionId])
  @@map("invoices")
}
